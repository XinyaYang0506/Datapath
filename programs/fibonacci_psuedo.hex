v2.0 raw
# This is an automatically-generated PIPS machine code file

# 0x0000: nop
00010000 

# 0x0004: li $s1, TERMINAL
0b01ff10 

# 0x0008: li $sp, 0xf800
0e01f800 

# 0x000c: li $s0, 2 #counter = 2
0a010002 

# 0x0010: li $s2, 1
0c010001 

# 0x0014: li $s3, 1
0d010001 

# 0x0018: addi $a0, $s2, 0
02c10000 

# 0x001c: jal print_decimal_number
ff0300c4 

# 0x0020: nop
00010000 

# 0x0024: li $t0, 0x0a                                  # Load ASCII value for newline
0601000a 

# 0x0028: sb $t0, 0($s1)                                # Print newline
b6b10000 

# 0x002c: addi $a0, $s3, 0
02d10000 

# 0x0030: jal print_decimal_number
ff0300c4 

# 0x0034: nop
00010000 

# 0x0038: li $t0, 0x0a                                  # Load ASCII value for newline
0601000a 

# 0x003c: sb $t0, 0($s1)                                # Print newline
b6b10000 

# 0x0040: li $t3, 15				        # set the limit to 15 numbers to print
0901000f 

# 0x0044: beq $t3, $s0, fibonacci_end
d9a1006c 

# 0x0048: nop
00010000 

# 0x004c: add $a0, $s3, $s2
02d0c000 

# 0x0050: addi $s2, $s3, 0
0cd10000 

# 0x0054: addi $s3, $a0, 0
0d210000 

# 0x0058: jal print_decimal_number
ff0300c4 

# 0x005c: nop
00010000 

# 0x0060: addi $s0, $s0, 1                              #counter++
0aa10001 

# 0x0064: j fibonacci_loop
f0010038 

# 0x0068: nop
00010000 

# 0x006c: j HALT                                        # Stop execution
f001ff00 

# 0x0070: nop
00010000 

# 0x0074: slt $t0, $a0, $a1 				# $a0 = numerator, $a1 = denominator
76203000 

# 0x0078: bne $t0, $zero, remainder_end
e601008c 

# 0x007c: nop
00010000 

# 0x0080: sub $a0, $a0, $a1
12203000 

# 0x0084: j remainder
f0010074 

# 0x0088: nop
00010000 

# 0x008c: addi $v0, $a0, 0
01210000 

# 0x0090: jr $ra
f000f000 

# 0x0094: nop
00010000 

# 0x0098: li $v0, 0					# counter = $v0
01010000 

# 0x009c: slt $t1, $a0, $a1				# see if $a0 < $a1 (bottom of the loop)
77203000 

# 0x00a0: bne $t1, $zero, quotient_exit
e70100bc 

# 0x00a4: nop
00010000 

# 0x00a8: sub $a0, $a0, $a1 				# SUB $a0 from $a1
12203000 

# 0x00ac: addi $v0, $v0, 1				# counter++
01110001 

# 0x00b0: nop
00010000 

# 0x00b4: j quotient_loop
f001009c 

# 0x00b8: nop
00010000 

# 0x00bc: jr $ra
f000f000 

# 0x00c0: nop
00010000 

# 0x00c4: bne $a0, $zero, else
e20100dc 

# 0x00c8: nop
00010000 

# 0x00cc: li $t0, 0x30                      # '0'
06010030 

# 0x00d0: sb $t0, 0($s1)
b6b10000 

# 0x00d4: jr $ra
f000f000 

# 0x00d8: nop
00010000 

# 0x00dc: li $a1, 10
0301000a 

# 0x00e0: push $ra
0ee1fffe cfe10000 

# 0x00e8: push $a0
0ee1fffe c2e10000 

# 0x00f0: jal remainder
ff030074 

# 0x00f4: nop
00010000 

# 0x00f8: pop $a0
a2e10000 0ee10002 

# 0x0100: push $v0
0ee1fffe c1e10000 

# 0x0108: slt $t2, $v0, $a0
78102000 

# 0x010c: beq $t2, $zero, end
d8010128 

# 0x0110: nop
00010000 

# 0x0114: jal quotient
ff030098 

# 0x0118: nop
00010000 

# 0x011c: addi $a0, $v0, 0
02110000 

# 0x0120: jal print_decimal_number
ff0300c4 

# 0x0124: nop
00010000 

# 0x0128: pop $t3
a9e10000 0ee10002 

# 0x0130: addi $t3, $t3, 0x30
09910030 

# 0x0134: sb $t3, 0($s1)
b9b10000 

# 0x0138: pop $ra
afe10000 0ee10002 

# 0x0140: addi $sp, $sp, 12
0ee1000c 

# 0x0144: jr $ra
f000f000 

# 0x0148: nop
00010000 
